{
  lib,
  pkgs,
  self,
  inputs,
  flakeRoot ? ../../.,
}:
let
  data = import ./data.nix {
    inherit
      lib
      flakeRoot
      self
      inputs
      ;
    inherit (pkgs) system;
  };
  docLib = import ./lib { inherit lib; };

  renderModule =
    module:
    let
      optionCount = lib.length (lib.attrNames (module.options or { }));
      title = toString (module.attrPathString or "<anonymous>");
      namespaceLabel = toString (module.namespace or "unknown");
      sourceLabel = toString (module.sourcePath or "unknown");
      statusEmoji =
        if module.status == "ok" then
          "✅"
        else if module.status == "skipped" then
          "⚠️"
        else
          "❌";
      skipLine =
        if module.skipReason != null then "- Skip reason: ${toString module.skipReason}\n" else "";
      errorLine =
        if module.status == "error" && module.error != null then
          "- Error: ${toString module.error}\n"
        else
          "";
      tagLine =
        let
          tagStrings = map toString module.tags;
        in
        if tagStrings != [ ] then "- Tags: ${lib.concatStringsSep ", " tagStrings}\n" else "";
    in
    "### ${statusEmoji} ${title}\n"
    + "- Namespace: ${namespaceLabel}\n"
    + "- Source: ${sourceLabel}\n"
    + "- Options: ${toString optionCount}\n"
    + skipLine
    + errorLine
    + tagLine;

  renderNamespace =
    name: modules:
    let
      stats = docLib.summarizeModules modules;
      namespaceName = toString name;
      header =
        "## Namespace ${namespaceName}\n"
        + "- Modules: ${toString stats.total}\n"
        + "- Extracted: ${toString stats.extracted}\n"
        + "- Skipped: ${toString stats.skipped}\n"
        + "- Failed: ${toString stats.failed}\n"
        + "\n";
      body = lib.concatStringsSep "\n" (map renderModule modules);
    in
    header + body + "\n";

  namespaceMarkdown = lib.concatStringsSep "\n" (
    lib.mapAttrsToList renderNamespace data.normalizedNamespaces
  );

  markdown =
    "# Module Documentation Bundle\n\n"
    + "- Generated by: module-docs-markdown\n"
    + "- System: ${pkgs.system}\n"
    + "- Total modules: ${toString (lib.length data.modules)}\n\n"
    + namespaceMarkdown;

in
pkgs.runCommand "module-docs-markdown" { } ''
    out_dir=$out/share/module-docs
    mkdir -p "$out_dir"
    cat >"$out_dir/modules.md" <<'MARKDOWN'
  ${markdown}
  MARKDOWN
''
