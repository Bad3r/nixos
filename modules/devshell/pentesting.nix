{ inputs, lib, ... }:
{
  nixpkgs.allowedUnfreePackages = lib.mkAfter [ "charles" ];
  perSystem =
    { pkgs, ... }:
    let
      burpsuitePackages = inputs."burpsuite-pro-flake".packages;
      inherit (burpsuitePackages.${pkgs.system}) burpsuitepro;
      charlesPackages = pkgs.callPackage ../../packages/charles { inherit pkgs; };
      charles = charlesPackages.charles5;
      burpsuiteAlias = pkgs.writeShellApplication {
        name = "burpsuite";
        runtimeInputs = [
          burpsuitepro
          pkgs.coreutils
        ];
        text = ''
          exec ${burpsuitepro}/bin/burpsuitepro "$@"
        '';
      };
      metasploitAlias = pkgs.writeShellApplication {
        name = "metasploit";
        runtimeInputs = [
          pkgs.coreutils
          pkgs.metasploit
        ];
        text = ''
          exec ${pkgs.metasploit}/bin/msfconsole "$@"
        '';
      };
      wappalyzerNext = pkgs.callPackage ../../packages/wappalyzer-next { };
      pentestPackages = [
        burpsuiteAlias
        burpsuitepro
        charles
        pkgs.nmap
        pkgs.wireshark
        pkgs.aircrack-ng
        pkgs.hydra
        pkgs.john
        pkgs.sqlmap
        metasploitAlias
        pkgs.metasploit
        pkgs.hashcat
        wappalyzerNext
      ];
    in
    {
      packages.wappalyzer-next = wappalyzerNext;
      make-shells.pentesting = {
        packages = pentestPackages;
        shellHook = ''
          echo "Pentesting shell ready. Tools: burpsuite (Burp Suite Professional), charles, nmap, wireshark, aircrack-ng, hydra, john, sqlmap, metasploit, hashcat, wappalyzer."
          echo "Tip: ensure your user is in the 'wireshark' group to capture packets."
        '';
      };
    };
}
