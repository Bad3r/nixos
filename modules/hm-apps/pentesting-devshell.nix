{
  flake.homeManagerModules.apps."pentesting-devshell" =
    { lib, pkgs, ... }:
    let
      rootPath = builtins.toString ../..;
      nixBin = lib.getExe' pkgs.nix "nix";
      pentestTools = [
        "burpsuite"
        "nmap"
        "wireshark"
        "aircrack-ng"
        "hydra"
        "john"
        "sqlmap"
        "metasploit"
        "hashcat"
        "wappalyzer"
      ];
      mkWrapper =
        tool:
        pkgs.writeShellApplication {
          name = "pentest-${tool}";
          runtimeInputs = [
            pkgs.nix
            pkgs.coreutils
          ];
          text = ''
            exec ${nixBin} develop ${lib.escapeShellArg rootPath}#pentesting --accept-flake-config --command ${lib.escapeShellArg tool} "$@"
          '';
        };
      wrappers = map mkWrapper pentestTools;
      mkDesktopEntry =
        {
          name,
          desktopName,
          comment,
          categories,
          icon ? null,
        }:
        {
          inherit name;
          value = {
            inherit comment categories;
            exec = "pentest-${name}";
            terminal = false;
            name = desktopName;
          }
          // lib.optionalAttrs (icon != null) { inherit icon; };
        };
      desktopEntries = builtins.listToAttrs (
        map mkDesktopEntry [
          {
            name = "burpsuite";
            desktopName = "Burp Suite (Pentesting Shell)";
            comment = "Launch Burp Suite inside the pentesting dev shell";
            categories = [
              "Network"
              "Security"
              "Development"
            ];
            icon = "burpsuite";
          }
          {
            name = "wireshark";
            desktopName = "Wireshark (Pentesting Shell)";
            comment = "Inspect traffic using Wireshark via the pentesting dev shell";
            categories = [
              "Network"
              "Security"
              "Utility"
            ];
            icon = "wireshark";
          }
        ]
      );
    in
    {
      home.packages = lib.mkAfter wrappers;
      xdg.enable = lib.mkDefault true;
      xdg.desktopEntries = desktopEntries;
    };
}
