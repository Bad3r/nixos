{
  nixpkgs.allowedUnfreePackages = [ "charles" ];

  flake.homeManagerModules.apps."pentesting-devshell" =
    {
      lib,
      pkgs,
      inputs,
      ...
    }:
    let
      rootPath = builtins.toString ../..;
      nixBin = lib.getExe' pkgs.nix "nix";
      burpsuitePkg = inputs."burpsuite-pro-flake".packages.${pkgs.system}.burpsuitepro;
      burpsuiteIconPkg = pkgs.runCommand "burpsuitepro-icon" { } ''
        mkdir -p $out/share/pixmaps
        cp ${burpsuitePkg}/share/pixmaps/burpsuitepro.png $out/share/pixmaps/
      '';
      charlesPackages = pkgs.callPackage ../../packages/charles { inherit pkgs; };
      charlesPkg = charlesPackages.charles5;
      charlesIconPkg = pkgs.runCommand "charles-icon" { } ''
        mkdir -p $out/share/pixmaps
        cp ${charlesPkg}/share/icons/hicolor/256x256/apps/charles-proxy5.png $out/share/pixmaps/charles.png
      '';
      pentestTools = [
        {
          wrapper = "burpsuite";
          command = "burpsuitepro";
          desktop = {
            desktopName = "BurpSuite Professional (Pentesting Shell)";
            comment = "An integrated platform for performing security testing of web applications";
            categories = [
              "Development"
              "Security"
              "System"
            ];
            icon = "${burpsuiteIconPkg}/share/pixmaps/burpsuitepro.png";
          };
        }
        {
          wrapper = "burpsuite-loader";
          command = "loader";
        }
        {
          wrapper = "wireshark";
          desktop = {
            desktopName = "Wireshark (Pentesting Shell)";
            comment = "Inspect traffic using Wireshark via the pentesting dev shell";
            categories = [
              "Network"
              "Security"
              "Utility"
            ];
            icon = "wireshark";
          };
        }
        {
          wrapper = "charles";
          desktop = {
            desktopName = "Charles Proxy (Pentesting Shell)";
            comment = "Debug HTTP(S) traffic using Charles via the pentesting dev shell";
            categories = [
              "Network"
              "Security"
              "Utility"
            ];
            icon = "${charlesIconPkg}/share/pixmaps/charles.png";
          };
        }
        { wrapper = "nmap"; }
        { wrapper = "aircrack-ng"; }
        { wrapper = "hydra"; }
        { wrapper = "john"; }
        { wrapper = "sqlmap"; }
        { wrapper = "metasploit"; }
        { wrapper = "hashcat"; }
        { wrapper = "wappalyzer"; }
      ];
      mkWrapper =
        tool:
        let
          name = tool.wrapper or tool;
          command = tool.command or name;
        in
        pkgs.writeShellApplication {
          name = "pentest-${name}";
          runtimeInputs = [
            pkgs.nix
            pkgs.coreutils
          ];
          text = ''
            exec ${nixBin} develop ${lib.escapeShellArg rootPath}#pentesting --accept-flake-config --command ${lib.escapeShellArg command} "$@"
          '';
        };
      wrappers = map mkWrapper pentestTools;
      mkDesktopEntry =
        tool:
        let
          name = tool.wrapper;
          inherit (tool) desktop;
          includeIcon = desktop ? icon;
        in
        {
          inherit name;
          value = {
            inherit (desktop) comment categories;
            exec = "pentest-${name}";
            terminal = false;
            name = desktop.desktopName;
          }
          // lib.optionalAttrs includeIcon { inherit (desktop) icon; };
        };
      desktopEntries = builtins.listToAttrs (
        map mkDesktopEntry (lib.filter (tool: tool ? desktop) pentestTools)
      );
    in
    {
      home.packages = lib.mkAfter (
        wrappers
        ++ [
          burpsuiteIconPkg
          charlesIconPkg
        ]
      );
      xdg.enable = lib.mkDefault true;
      xdg.desktopEntries = desktopEntries;
    };
}
