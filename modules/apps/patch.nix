/*
  Package: patch
  Description: GNU utility for applying unified or context diff files to original sources.
  Homepage: https://www.gnu.org/software/patch/
  Documentation: https://www.gnu.org/software/patch/manual/
  Repository: https://git.savannah.gnu.org/cgit/patch.git

  Summary:
    * Reads diff files generated by tools like `diff` to update source trees safely.
    * Supports dry runs, fuzz factors, and automatic backup creation to aid collaborative development.

  Options:
    -p1: Strip one leading path component from filenames when applying patches.
    --dry-run: Preview changes without writing to disk, useful for validating patches.
    -R: Reverse an already-applied patch to restore the previous state.
*/
{
  config,
  lib,
  pkgs,
  ...
}:
let
  PatchModule =
    {
      config,
      lib,
      pkgs,
      ...
    }:
    let
      cfg = config.programs.patch.extended;
    in
    {
      options.programs.patch.extended = {
        enable = lib.mkOption {
          type = lib.types.bool;
          default = false;
          description = lib.mdDoc "Whether to enable patch.";
        };

        package = lib.mkPackageOption pkgs "patch" { };
      };

      config = lib.mkIf cfg.enable {
        environment.systemPackages = [ cfg.package ];
      };
    };
in
{
  flake.nixosModules.apps.patch = PatchModule;
}
